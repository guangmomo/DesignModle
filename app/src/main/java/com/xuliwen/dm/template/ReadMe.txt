http://blog.csdn.net/self_study/article/details/52662896

1. 写法：抽象模板定义好算法步骤，固定步骤定义为final方法，必须让子类实现的步骤定义为abstract方法，
子类选择实现的定义为普通的方法并提供默认实现

2. 优点：
1）有些时候只知道算法的步骤，但是步骤的具体实现跟环境有关系，这时候就可以把步骤定义在模板类中，然后在具体
的模板类中去实现这些步骤（根据使用环境的不同会有不同的实现）
2）封装不变部分，扩展可变部分；
3）提取公共部分代码，便于维护。

  缺点：
  模板方法会带来代码阅读的难度，加大理解的难度，而且由于父类将步骤固定，所以有时候会增加扩展的难度

3. 使用场景：
1）多个子类有共有的方法，并且逻辑基本相同时；
2）重要、复杂的算法，可以把核心算法设计成模板方法，周边相关细节功能则由各个子类实现；
3）重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为


4. 应用举例：
Activity的生命周期